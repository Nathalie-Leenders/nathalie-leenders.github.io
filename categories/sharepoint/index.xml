<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sharepoint on Power Platform Tips &amp; Tricks</title><link>https://blog.nathalieleenders.com/categories/sharepoint/</link><description>Recent content in Sharepoint on Power Platform Tips &amp; Tricks</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 20 Feb 2025 09:27:14 +0000</lastBuildDate><atom:link href="https://blog.nathalieleenders.com/categories/sharepoint/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog series - Conclusion</title><link>https://blog.nathalieleenders.com/posts/series-http-conclusion/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-conclusion/</guid><description>&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>So, there are a lot of HTTP calls that can be done. I&amp;rsquo;ve touched upon a few, hopefully you&amp;rsquo;ve gained a bit more insight in how these work.&lt;/p>
&lt;h2 id="some-takeaways">Some takeaways&lt;/h2>
&lt;p>If you do a lot of HTTP calls in a single flow, there might be a cache issue poking around, resulting in double updates.&lt;/p>
&lt;p>When you use Term Store values to update, it wont show in the version history. (work around is to append them to a multiple line text field, but this results in a double entry in version history)&lt;/p></description></item><item><title>Blog series - Get term store (for content types)?</title><link>https://blog.nathalieleenders.com/posts/series-http-gettermstoreitems/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-gettermstoreitems/</guid><description>&lt;h3 id="scenario">Scenario:&lt;/h3>
&lt;p>Fetching Terms from a Specific Term Set in a Term Store&lt;/p>
&lt;h3 id="objective">Objective&lt;/h3>
&lt;p>You want to retrieve all terms from a specific term set within a term store in SharePoint. The term store and term set are identified by their unique GUIDs.&lt;/p>
&lt;p>Steps:&lt;/p>
&lt;h3 id="identify-the-term-store-and-term-set-guids">Identify the Term Store and Term Set GUIDs&lt;/h3>
&lt;p>You have a SharePoint site with managed metadata, and you need to fetch all terms from a specific term set. For example, all labels from the Status metadata column.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Best practises</title><link>https://blog.nathalieleenders.com/posts/series-http-best-practices/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-best-practices/</guid><description>&lt;h1 id="best-practises">Best practises&lt;/h1>
&lt;p>Here are some best practises I found either online or discovered myself.&lt;/p>
&lt;h2 id="use-the-appropriate-http-method">Use the Appropriate HTTP Method&lt;/h2>
&lt;p>Use GET for retrieving data, POST for creating new resources, PUT for updating existing resources, and DELETE for removing resources.&lt;/p>
&lt;h2 id="set-proper-permissions">Set Proper Permissions&lt;/h2>
&lt;p>Ensure that you have the necessary permissions for the operations you intend to perform. This includes configuring the appropriate access levels for users and applications. Proper permissions help prevent unauthorized access and maintain data security.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Call a flow from a button</title><link>https://blog.nathalieleenders.com/posts/series-http-callflowfrombutton/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-callflowfrombutton/</guid><description>&lt;h1 id="json-formatting-on-a-sharepoint-list">JSON formatting on a sharepoint list?&lt;/h1>
&lt;p>In this blog post, we&amp;rsquo;ll explore the powerful capabilities of JSON list formatting in SharePoint. JSON formatting allows you to customize the appearance of your lists and libraries, making them more user-friendly and visually appealing. We&amp;rsquo;ll cover how to get a flow identifier, add a column, set JSON formatting code, and additional button formatting options such as showing/hiding based on fields and permissions.&lt;/p>
&lt;h2 id="get-flow-identifier">Get Flow Identifier&lt;/h2>
&lt;p>To begin, you&amp;rsquo;ll need to get the flow identifier for the specific flow you want to use. This identifier is essential for linking your JSON formatting to the flow. You can find the flow identifier in the URL of your flow in Power Automate. Simply navigate to your flow, and copy the identifier from the URL. Or click on Export, Get flow identifier.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Fetching Specific List Information</title><link>https://blog.nathalieleenders.com/posts/series-http-getlistbyname/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-getlistbyname/</guid><description>&lt;h1 id="scenario">Scenario&lt;/h1>
&lt;p>Fetching Specific List Information&lt;/p>
&lt;h1 id="objective">Objective&lt;/h1>
&lt;p>You want to retrieve the ID and Title of a specific SharePoint list whose title matches a given name.&lt;/p>
&lt;h1 id="steps">Steps:&lt;/h1>
&lt;ul>
&lt;li>Identify the List Title: You have a SharePoint site with multiple lists, and you need to fetch the ID and Title of a list named &amp;rsquo;name&amp;rsquo; or of course add your own name.&lt;/li>
&lt;li>Construct the HTTP Request: You can filter on the name, by adding a ?$filter=title to your query. This uses oData filtering.
You can filter on other things as well, you can use basic filtering such as lt (less than) le (less than or equal) gt (greater then) ge (greater or equal) eq (equal) or ne(not equal).&lt;/li>
&lt;/ul>
&lt;p>Also, `Startswith, substringof, and date time functions are supported.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Free vs Premium?</title><link>https://blog.nathalieleenders.com/posts/series-http-freevspremium/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-freevspremium/</guid><description>&lt;h1 id="short-overview---when-to-need-a-premium-license-and-when-not">Short overview - when to need a premium license and when not&lt;/h1>
&lt;p>When can you get away with Power Automate free, and when do you need premium when working with http calls?&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Free&lt;/th>
&lt;th>Premium&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Sharepoint HTTP request&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Triggers&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>For a selected item&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>For a selected file&lt;/td>
&lt;td>X&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>When an HTTP request is received&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HTTP request&lt;/td>
&lt;td>&lt;/td>
&lt;td>X&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Blog series - HTTP calls to Sharepoint - Get - Http get library id by GUID?</title><link>https://blog.nathalieleenders.com/posts/series-http-getlibraryidbyguid/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-getlibraryidbyguid/</guid><description>&lt;h3 id="scenario">Scenario&lt;/h3>
&lt;p>Fetching a Specific List by Library ID&lt;/p>
&lt;h2 id="objective">Objective&lt;/h2>
&lt;p>You want to retrieve the details of a specific SharePoint list using its unique Library ID stored in a variable.&lt;/p>
&lt;h3 id="steps">Steps&lt;/h3>
&lt;h2 id="identify-the-library-id">Identify the Library ID&lt;/h2>
&lt;p>You have a SharePoint site with multiple lists, and you need to fetch the details of a list using its unique Library ID. The Library ID is stored in the variable VarLibraryID.&lt;/p>
&lt;h2 id="construct-the-http-request">Construct the HTTP Request&lt;/h2>
&lt;p>Use the SharePoint REST API to get the list details by specifying the Library ID in the URL.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Get - Http get version number</title><link>https://blog.nathalieleenders.com/posts/series-http-getversionnumber/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-getversionnumber/</guid><description>&lt;h2 id="scenario">Scenario&lt;/h2>
&lt;p>Fetching a Specific Item from a SharePoint List&lt;/p>
&lt;h2 id="objective">Objective&lt;/h2>
&lt;p>Get a specific item from sharepoint, with all the metadata, that you can then re-use in your flow. In my example we&amp;rsquo;re going with version number.&lt;/p>
&lt;h3 id="steps">Steps:&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Identify the List and Item: You have a SharePoint site with multiple lists, and you need to fetch the details of a specific item from a list. The list name and item ID are stored in variables &lt;code>VarListname&lt;/code> and &lt;code>VarItemID&lt;/code> but you can of course use your own naming method.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Permissions</title><link>https://blog.nathalieleenders.com/posts/series-http-permissionsneeded/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-permissionsneeded/</guid><description>&lt;h1 id="permissions-needed">Permissions needed&lt;/h1>
&lt;p>During my testing, I had SharePoint administrator access with full control on the lists, so I could do anything. For most of the calls, I recommend getting SharePoint administrator access to avoid any issues.&lt;/p>
&lt;h3 id="known-error">Known Error:&lt;/h3>
&lt;p>If the API call throws an error indicating that you&amp;rsquo;re not authorized, it doesn&amp;rsquo;t always mean you don’t have the correct permissions. It could mean you&amp;rsquo;re attempting to make an API call to an area of SharePoint that’s not allowed to be called. For example, if you&amp;rsquo;ve made a typo somewhere or aren&amp;rsquo;t using the correct type of call.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Types in Sharepoint</title><link>https://blog.nathalieleenders.com/posts/series-http-typesinsharepoint/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-typesinsharepoint/</guid><description>&lt;h1 id="using-the-sharepoint-rest-api-to-update-metadata-fields">Using the SharePoint REST API to Update Metadata Fields&lt;/h1>
&lt;p>When working with SharePoint REST API, you might need to update a metadata field that originates from a content type. To do this, you first need to get the type value from your library. This type value is essential for making the correct HTTP call to update the metadata field. I dont fully understand the inner workings of sharepoint, but without this field being accurate your call wont work.&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Why do I need X-request-digest?</title><link>https://blog.nathalieleenders.com/posts/series-http-xrequestdigest/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-xrequestdigest/</guid><description>&lt;h1 id="what-is-it-and-why-do-i-need-it">What is it, and why do I need it?&lt;/h1>
&lt;p>Think of it as a type of token, that allows you, or permits you, to modify files on Sharepoint through an HTTP request.&lt;/p>
&lt;p>When you use POST as your method, and need to use Merge in your header, you also need to include a request digest value.&lt;/p>
&lt;p>Without it, you&amp;rsquo;re not authorized to do this action.&lt;/p>
&lt;img src="httpcall.png"
width="619"
height="288"
>
&lt;p>What it will look like to use it in a call;&lt;/p></description></item><item><title>Blog series - HTTP calls to Sharepoint - Working with folders</title><link>https://blog.nathalieleenders.com/posts/series-http-workingwithfolders/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-workingwithfolders/</guid><description>&lt;h1 id="working-with-folders-and-the-sharepoint-api">Working with folders and the Sharepoint API&lt;/h1>
&lt;p>When working with the SharePoint API, handling folders can sometimes be tricky, especially when dealing with deeply nested structures. In this post, we&amp;rsquo;ll explore how to dynamically grab the file location regardless of how deep it is in the root or folder structure. We&amp;rsquo;ll also cover how to handle common issues like permission errors.&lt;/p>
&lt;h1 id="dynamically-grabbing-the-file-location">Dynamically Grabbing the File Location&lt;/h1>
&lt;p>To work with folders in the SharePoint API, you need to use the full path. This ensures that you can dynamically grab the file location, no matter how deep it is within the root or folder structure.&lt;/p></description></item><item><title>Blog series - Post - Breaking Role Inheritance for a Specific Item in a SharePoint List</title><link>https://blog.nathalieleenders.com/posts/series-http-breakinheritance/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-breakinheritance/</guid><description>&lt;h3 id="scenario">Scenario&lt;/h3>
&lt;p>Breaking Role Inheritance for a Specific Item in a SharePoint List&lt;/p>
&lt;p>&lt;strong>Objective:&lt;/strong>
You want to break the role inheritance for a specific item in a SharePoint list, for example when you need to set your own permissions on a file.&lt;/p>
&lt;p>&lt;strong>Steps:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Identify the List and Item:&lt;/strong>
You have a SharePoint site with multiple lists, and you need to break the role inheritance for a specific item in a list. I have the list name and item ID stored in variables &lt;code>VarListname&lt;/code> and &lt;code>VarItemID&lt;/code> , but you&amp;rsquo;re welcome to use your own names of course.&lt;/p></description></item><item><title>Blog series - Post - Copying a File to a New Location in SharePoint?</title><link>https://blog.nathalieleenders.com/posts/series-http-copylistitem/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-copylistitem/</guid><description>&lt;h3 id="scenario">Scenario&lt;/h3>
&lt;p>Copying a File to a New Location in SharePoint&lt;/p>
&lt;h3 id="objective">Objective&lt;/h3>
&lt;p>You want to copy a file from one location to another within a SharePoint site. The source file URL and the destination file URL are known or in variables to use.&lt;/p>
&lt;h3 id="steps">Steps:&lt;/h3>
&lt;h3 id="construct-the-http-request">Construct the HTTP Request&lt;/h3>
&lt;p>Use the SharePoint REST API to copy the file by specifying the source file URL and the destination file URL in the URL.&lt;/p></description></item><item><title>Blog series - Post - Fetching a Specific Item from a SharePoint List by Title and Item ID?</title><link>https://blog.nathalieleenders.com/posts/series-http-updatelistitem/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-updatelistitem/</guid><description>&lt;h3 id="scenario">Scenario&lt;/h3>
&lt;p>Fetching a Specific Item from a SharePoint List by Title and Item ID&lt;/p>
&lt;h3 id="objective">Objective&lt;/h3>
&lt;p>You want to retrieve the details of a specific item from a SharePoint list based on the list title and item ID.&lt;/p>
&lt;h3 id="steps">Steps:&lt;/h3>
&lt;p>This call is very similar to getting the list item information, but instead of using Get, we use Post, to be able to update our item.&lt;/p>
&lt;p>In the body, you can then specify what you want to update.&lt;/p></description></item><item><title>Blog series - Post - HTTP Update list item term store?</title><link>https://blog.nathalieleenders.com/posts/series-http-updateitemfromtermstore/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-updateitemfromtermstore/</guid><description>&lt;h3 id="scenario">Scenario:&lt;/h3>
&lt;p>You have a metadata column you want to update, but how to do this?&lt;/p>
&lt;h3 id="objective">Objective:&lt;/h3>
&lt;p>You want to update the status field, with a new status from that term set.&lt;/p>
&lt;h1 id="steps">Steps&lt;/h1>
&lt;h3 id="identify-the-list-and-item">Identify the List and Item&lt;/h3>
&lt;p>Like always, I&amp;rsquo;ll use varsitename in the URL, and in the URI Varlistname and VaritemID.&lt;/p>
&lt;h3 id="execute-the-http-request">Execute the HTTP Request&lt;/h3>
&lt;p>With this request, I&amp;rsquo;m updating the name_status field. I will have to have queried the term store before, to get the filter array for the status field I want to have it updated to.&lt;/p></description></item><item><title>Blog series - Post - Revoke permissions to a document through the API</title><link>https://blog.nathalieleenders.com/posts/series-http-setpermissionstoread/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-setpermissionstoread/</guid><description>&lt;h3 id="scenario">Scenario&lt;/h3>
&lt;p>Revoke permissions to a document through the API.&lt;/p>
&lt;p>Here comes the tricky part. There are 2 kind (that I found) role types on Sharepoint.&lt;/p>
&lt;ol>
&lt;li>Roles from the Roletypekind&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>None (Role = 0)&lt;/strong>: No permissions assigned.&lt;/li>
&lt;li>&lt;strong>Guest (Role = 1)&lt;/strong>: Limited access, typically read-only.&lt;/li>
&lt;li>&lt;strong>Reader (Role = 2)&lt;/strong>: Can view items but not make changes.&lt;/li>
&lt;li>&lt;strong>Contributor (Role = 3)&lt;/strong>: Can add and edit items.&lt;/li>
&lt;li>&lt;strong>WebDesigner (Role = 4)&lt;/strong>: Can design and manage site content.&lt;/li>
&lt;li>&lt;strong>Administrator (Role = 5)&lt;/strong>: Full control over the site.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Role (UserRoleAssignment).&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>View (Role = 1)&lt;/strong>: Grants read-only access to the document.&lt;/li>
&lt;li>&lt;strong>Edit (Role = 2)&lt;/strong>: Allows the user to edit the document.&lt;/li>
&lt;li>&lt;strong>Owner (Role = 3)&lt;/strong>: Grants full control over the document, including the ability to manage permissions.&lt;/li>
&lt;li>&lt;strong>None (Role = 0)&lt;/strong>: Removes any previously assigned permissions.&lt;/li>
&lt;/ul>
&lt;h3 id="step-1---you-need-to-have-broken-inheritance-first-otherwise-this-wont-work">Step 1 - You need to have broken inheritance first, otherwise this won&amp;rsquo;t work.&lt;/h3>
&lt;h2 id="api-call-1---get-all-the-groups-from-sharepoint">API call 1 - Get all the groups from Sharepoint&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>Method: Post
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>URI: _api/web/lists/getbytitle(&amp;#39;@{variables(&amp;#39;VarListname&amp;#39;)}&amp;#39;)/items(@{variables(&amp;#39;VarItemID&amp;#39;)})/UpdateDocumentSharingInfo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://blog.nathalieleenders.com/posts/series-http-setpermissionstoread/list0.png" alt="Http call">&lt;/p></description></item><item><title>Introduction to blog series - HTTP calls to Sharepoint</title><link>https://blog.nathalieleenders.com/posts/series-http-introduction/</link><pubDate>Thu, 20 Feb 2025 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/series-http-introduction/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Welcome to my blog post series on HTTP SharePoint calls.&lt;/p>
&lt;p>In this series, we&amp;rsquo;ll dive into the different types of HTTP calls you can make to SharePoint, including GET, POST, PUT, and DELETE. We&amp;rsquo;ll explore the necessary permissions required for these calls and how to set them up correctly. Additionally, we&amp;rsquo;ll cover the essential components of an HTTP request, such as headers and body, and explain how to structure them for successful communication with SharePoint.&lt;/p></description></item><item><title>Filter on date column with random years on Sharepoint</title><link>https://blog.nathalieleenders.com/posts/sharepointfilteronyear/</link><pubDate>Tue, 20 Feb 2024 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/sharepointfilteronyear/</guid><description>&lt;h2 id="usecase">Usecase&lt;/h2>
&lt;p>You have a sharepoint list with birthdays, on a date column, but dont know how to filter on them to show the last few days or upcoming few days if someone has (had) their birthday.&lt;/p>
&lt;p>I couldnt figure out how to do this, and then a colleague of mine Remco Bruijstens (thank you!) suggested this method, and after testing it worked.
Kudos to him, and I wanted to share with you how to accomplish this.&lt;/p></description></item><item><title>Custom document link sharing with Sharepoint and Power Automate</title><link>https://blog.nathalieleenders.com/posts/sharepointlibrarypermissions/</link><pubDate>Mon, 11 Sep 2023 09:27:14 +0000</pubDate><guid>https://blog.nathalieleenders.com/posts/sharepointlibrarypermissions/</guid><description>&lt;h2 id="usecase">Usecase&lt;/h2>
&lt;p>You need to share a file from sharepoint to an external user, in an automated process. No manual &amp;lsquo;create link&amp;rsquo; actions needed on the sharepoint site. You can then email this link to your external client.&lt;/p>
&lt;p>Default on Power automate for a sharing link for sharepoint, is to set the Link Scope to either:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Anyone with the link (including anonymous)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>People in your organization&lt;/p>
&lt;p>This explains how you can use the &amp;lsquo;people with existing access&amp;rsquo; sharing type.&lt;/p></description></item></channel></rss>